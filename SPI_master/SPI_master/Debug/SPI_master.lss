
SPI_master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000128  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000017c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001ac  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  000001ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000002b3  00000000  00000000  0000023c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001af  00000000  00000000  000004ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002a6  00000000  00000000  0000069e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000090  00000000  00000000  00000944  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000235  00000000  00000000  000009d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000f2  00000000  00000000  00000c09  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00000cfb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 78 00 	call	0xf0	; 0xf0 <main>
  78:	0c 94 92 00 	jmp	0x124	; 0x124 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <SPI_masterInit>:
	SPI_txrx(CAN_WRITE);//send write instruction
	SPI_txrx(adress);//send address
	SPI_txrx(data);//send value
	
	SET_H(SS);//disable slave
  80:	22 9a       	sbi	0x04, 2	; 4
  82:	23 9a       	sbi	0x04, 3	; 4
  84:	25 9a       	sbi	0x04, 5	; 4
  86:	2a 9a       	sbi	0x05, 2	; 5
  88:	2b 98       	cbi	0x05, 3	; 5
  8a:	2d 98       	cbi	0x05, 5	; 5
  8c:	8c b5       	in	r24, 0x2c	; 44
  8e:	80 65       	ori	r24, 0x50	; 80
  90:	8c bd       	out	0x2c, r24	; 44
  92:	8c b5       	in	r24, 0x2c	; 44
  94:	83 60       	ori	r24, 0x03	; 3
  96:	8c bd       	out	0x2c, r24	; 44
  98:	08 95       	ret

0000009a <SPI_txrx>:
  9a:	8e bd       	out	0x2e, r24	; 46
  9c:	0d b4       	in	r0, 0x2d	; 45
  9e:	07 fe       	sbrs	r0, 7
  a0:	fd cf       	rjmp	.-6      	; 0x9c <SPI_txrx+0x2>
  a2:	87 ec       	ldi	r24, 0xC7	; 199
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	01 97       	sbiw	r24, 0x01	; 1
  a8:	f1 f7       	brne	.-4      	; 0xa6 <SPI_txrx+0xc>
  aa:	00 c0       	rjmp	.+0      	; 0xac <SPI_txrx+0x12>
  ac:	00 00       	nop
  ae:	8e b5       	in	r24, 0x2e	; 46
  b0:	08 95       	ret

000000b2 <USART_Init>:
  b2:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
  b6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
  ba:	e1 ec       	ldi	r30, 0xC1	; 193
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	80 81       	ld	r24, Z
  c0:	88 61       	ori	r24, 0x18	; 24
  c2:	80 83       	st	Z, r24
  c4:	e2 ec       	ldi	r30, 0xC2	; 194
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	80 81       	ld	r24, Z
  ca:	86 60       	ori	r24, 0x06	; 6
  cc:	80 83       	st	Z, r24
  ce:	08 95       	ret

000000d0 <USART_Receive>:
  d0:	e0 ec       	ldi	r30, 0xC0	; 192
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	80 81       	ld	r24, Z
  d6:	88 23       	and	r24, r24
  d8:	ec f7       	brge	.-6      	; 0xd4 <USART_Receive+0x4>
  da:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  de:	08 95       	ret

000000e0 <USART_Transmit>:
  e0:	e0 ec       	ldi	r30, 0xC0	; 192
  e2:	f0 e0       	ldi	r31, 0x00	; 0
  e4:	90 81       	ld	r25, Z
  e6:	95 ff       	sbrs	r25, 5
  e8:	fd cf       	rjmp	.-6      	; 0xe4 <USART_Transmit+0x4>
  ea:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  ee:	08 95       	ret

000000f0 <main>:
int main(void)
{
	uint8_t usart_char;
	uint8_t spi_char;
	
	USART_Init(103);
  f0:	87 e6       	ldi	r24, 0x67	; 103
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	0e 94 59 00 	call	0xb2	; 0xb2 <USART_Init>
	SPI_masterInit();
  f8:	0e 94 40 00 	call	0x80	; 0x80 <SPI_masterInit>
	
	USART_Transmit(13);
  fc:	8d e0       	ldi	r24, 0x0D	; 13
  fe:	0e 94 70 00 	call	0xe0	; 0xe0 <USART_Transmit>
	
    while (1) 
    {
		if(!(UCSR0A & (1<<RXC0)))//if data in serial buffer
 102:	c0 ec       	ldi	r28, 0xC0	; 192
 104:	d0 e0       	ldi	r29, 0x00	; 0
 106:	88 81       	ld	r24, Y
 108:	88 23       	and	r24, r24
 10a:	ec f3       	brlt	.-6      	; 0x106 <main+0x16>
		{
			usart_char = USART_Receive();//get serial data
 10c:	0e 94 68 00 	call	0xd0	; 0xd0 <USART_Receive>
			SET_L(SS);//enable slave
 110:	2a 98       	cbi	0x05, 2	; 5
			SPI_txrx(usart_char);
 112:	0e 94 4d 00 	call	0x9a	; 0x9a <SPI_txrx>
			spi_char = SPI_txrx(0x00);// send data over SPI and get data
 116:	80 e0       	ldi	r24, 0x00	; 0
 118:	0e 94 4d 00 	call	0x9a	; 0x9a <SPI_txrx>
			SET_H(SS);//disable slave
 11c:	2a 9a       	sbi	0x05, 2	; 5
			USART_Transmit(spi_char);//send received data over serial
 11e:	0e 94 70 00 	call	0xe0	; 0xe0 <USART_Transmit>
 122:	f1 cf       	rjmp	.-30     	; 0x106 <main+0x16>

00000124 <_exit>:
 124:	f8 94       	cli

00000126 <__stop_program>:
 126:	ff cf       	rjmp	.-2      	; 0x126 <__stop_program>
