
can_bus.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000026  00800100  00000652  000006e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000652  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000016  00800126  00800126  0000070c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000070c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000073c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  0000077c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ba9  00000000  00000000  0000081c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000002dc  00000000  00000000  000013c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000073a  00000000  00000000  000016a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000021c  00000000  00000000  00001ddc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000346  00000000  00000000  00001ff8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006a5  00000000  00000000  0000233e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  000029e3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 fd 02 	jmp	0x5fa	; 0x5fa <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e5       	ldi	r30, 0x52	; 82
  7c:	f6 e0       	ldi	r31, 0x06	; 6
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 32       	cpi	r26, 0x26	; 38
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e2       	ldi	r26, 0x26	; 38
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ac 33       	cpi	r26, 0x3C	; 60
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 c6 02 	call	0x58c	; 0x58c <main>
  9e:	0c 94 27 03 	jmp	0x64e	; 0x64e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <GPIO_init>:
void GPIO_init(void)
{
	//SPI GPIO set in spi_ry.h
	
	//set input for INT line PD2
	SET_INPUT(INT);
  a6:	52 98       	cbi	0x0a, 2	; 10
	
	//set output for status LED on PB0
	SET_OUTPUT(LED2);
  a8:	20 9a       	sbi	0x04, 0	; 4
  aa:	08 95       	ret

000000ac <INTERRUPT_init>:
	interrupt initiation|
******************************************************************************/
void INTERRUPT_init(void)
{
	//enable external interrupt for INT line from mcp2515
	EIMSK |= (1<<INT0);//enable
  ac:	e8 9a       	sbi	0x1d, 0	; 29
	EICRA &= ~(3<<ISC00);//low level interrupt for INT0
  ae:	e9 e6       	ldi	r30, 0x69	; 105
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	80 81       	ld	r24, Z
  b4:	8c 7f       	andi	r24, 0xFC	; 252
  b6:	80 83       	st	Z, r24
	
	sei(); //global interrupt enable
  b8:	78 94       	sei
  ba:	08 95       	ret

000000bc <SPI_masterInit>:


void SPI_masterInit(void)
{
	//set SS, MOSI, & SCK OUTPUT
	SET_OUTPUT(SS);
  bc:	22 9a       	sbi	0x04, 2	; 4
	SET_OUTPUT(MOSI);
  be:	23 9a       	sbi	0x04, 3	; 4
	SET_OUTPUT(SCK);
  c0:	25 9a       	sbi	0x04, 5	; 4
	
	//SS high
	SET_H(SS);
  c2:	2a 9a       	sbi	0x05, 2	; 5
	// MOSI & SCK low
	SET_L(MOSI);
  c4:	2b 98       	cbi	0x05, 3	; 5
	SET_L(SCK);
  c6:	2d 98       	cbi	0x05, 5	; 5
	
	//enable SPI
	SPCR |= (1<<SPE) | (1<<MSTR);
  c8:	8c b5       	in	r24, 0x2c	; 44
  ca:	80 65       	ori	r24, 0x50	; 80
  cc:	8c bd       	out	0x2c, r24	; 44
	
	//set SCK divider to f_osc/8
	SPCR |= 0b11; //sets divider to f_osc/16
  ce:	8c b5       	in	r24, 0x2c	; 44
  d0:	83 60       	ori	r24, 0x03	; 3
  d2:	8c bd       	out	0x2c, r24	; 44
  d4:	08 95       	ret

000000d6 <SPI_txrx>:
	//SPSR |= 1; //f_osc * 2, results in f_osc/8
}

char SPI_txrx(char val)
{
	SPDR = val; //send value to buffer
  d6:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF))); //wait until complete
  d8:	0d b4       	in	r0, 0x2d	; 45
  da:	07 fe       	sbrs	r0, 7
  dc:	fd cf       	rjmp	.-6      	; 0xd8 <SPI_txrx+0x2>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  de:	87 ec       	ldi	r24, 0xC7	; 199
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	01 97       	sbiw	r24, 0x01	; 1
  e4:	f1 f7       	brne	.-4      	; 0xe2 <SPI_txrx+0xc>
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <SPI_txrx+0x12>
  e8:	00 00       	nop
	_delay_us(50);
	return(SPDR);  //return received value
  ea:	8e b5       	in	r24, 0x2e	; 46
  ec:	08 95       	ret

000000ee <USART_Init>:
	USART initialization|
******************************************************************************/
void USART_Init( unsigned int ubrr)
{
	/*Set baud rate */
	UBRR0H = (unsigned char)(ubrr>>8);
  ee:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = (unsigned char)ubrr;
  f2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	
	UCSR0B |= (1<<RXEN0)|(1<<TXEN0);
  f6:	e1 ec       	ldi	r30, 0xC1	; 193
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	80 81       	ld	r24, Z
  fc:	88 61       	ori	r24, 0x18	; 24
  fe:	80 83       	st	Z, r24
		/*Enable receiver and transmitter */
	
	UCSR0C |= (3<<UCSZ00);
 100:	e2 ec       	ldi	r30, 0xC2	; 194
 102:	f0 e0       	ldi	r31, 0x00	; 0
 104:	80 81       	ld	r24, Z
 106:	86 60       	ori	r24, 0x06	; 6
 108:	80 83       	st	Z, r24
 10a:	08 95       	ret

0000010c <USART_Receive>:
		currently not used
******************************************************************************/
uint8_t USART_Receive( void )
{
	/* Wait for data to be received */
	while (!(UCSR0A & (1<<RXC0)));
 10c:	e0 ec       	ldi	r30, 0xC0	; 192
 10e:	f0 e0       	ldi	r31, 0x00	; 0
 110:	80 81       	ld	r24, Z
 112:	88 23       	and	r24, r24
 114:	ec f7       	brge	.-6      	; 0x110 <USART_Receive+0x4>
	/* Get and return received data from buffer */
	return UDR0;
 116:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
 11a:	08 95       	ret

0000011c <USART_Transmit>:
		transmits a character across the uart tx/rx pins
******************************************************************************/
void USART_Transmit( uint8_t data )
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) );
 11c:	e0 ec       	ldi	r30, 0xC0	; 192
 11e:	f0 e0       	ldi	r31, 0x00	; 0
 120:	90 81       	ld	r25, Z
 122:	95 ff       	sbrs	r25, 5
 124:	fd cf       	rjmp	.-6      	; 0x120 <USART_Transmit+0x4>
	/* Put data into buffer, sends the data */
	UDR0 = data;
 126:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 12a:	08 95       	ret

0000012c <USART_Transmit_TX>:
	USART string transmit|
		parses a string argument and passes each character to the
		USART_Transmit function.
******************************************************************************/
void USART_Transmit_TX(char string[])
{
 12c:	ef 92       	push	r14
 12e:	ff 92       	push	r15
 130:	0f 93       	push	r16
 132:	1f 93       	push	r17
 134:	cf 93       	push	r28
 136:	df 93       	push	r29
	int wordsize = strlen(string);
 138:	fc 01       	movw	r30, r24
 13a:	01 90       	ld	r0, Z+
 13c:	00 20       	and	r0, r0
 13e:	e9 f7       	brne	.-6      	; 0x13a <USART_Transmit_TX+0xe>
 140:	31 97       	sbiw	r30, 0x01	; 1
 142:	7f 01       	movw	r14, r30
 144:	e8 1a       	sub	r14, r24
 146:	f9 0a       	sbc	r15, r25
	int counter = 0;
	
	while(wordsize != counter)
 148:	61 f0       	breq	.+24     	; 0x162 <USART_Transmit_TX+0x36>
 14a:	8c 01       	movw	r16, r24
 14c:	c0 e0       	ldi	r28, 0x00	; 0
 14e:	d0 e0       	ldi	r29, 0x00	; 0
	{
		USART_Transmit(string[counter]);
 150:	f8 01       	movw	r30, r16
 152:	81 91       	ld	r24, Z+
 154:	8f 01       	movw	r16, r30
 156:	0e 94 8e 00 	call	0x11c	; 0x11c <USART_Transmit>
		counter++;
 15a:	21 96       	adiw	r28, 0x01	; 1
void USART_Transmit_TX(char string[])
{
	int wordsize = strlen(string);
	int counter = 0;
	
	while(wordsize != counter)
 15c:	ec 16       	cp	r14, r28
 15e:	fd 06       	cpc	r15, r29
 160:	b9 f7       	brne	.-18     	; 0x150 <USART_Transmit_TX+0x24>
	{
		USART_Transmit(string[counter]);
		counter++;
	}
 162:	df 91       	pop	r29
 164:	cf 91       	pop	r28
 166:	1f 91       	pop	r17
 168:	0f 91       	pop	r16
 16a:	ff 90       	pop	r15
 16c:	ef 90       	pop	r14
 16e:	08 95       	ret

00000170 <mcp2515_write_register>:
	uint8_t data[8];
} tCAN;


void mcp2515_write_register( uint8_t adress, uint8_t data )
{
 170:	cf 93       	push	r28
 172:	df 93       	push	r29
 174:	d8 2f       	mov	r29, r24
 176:	c6 2f       	mov	r28, r22
	SET_L(SS);//enable slave
 178:	2a 98       	cbi	0x05, 2	; 5

	SPI_txrx(CAN_WRITE);//send write instruction
 17a:	82 e0       	ldi	r24, 0x02	; 2
 17c:	0e 94 6b 00 	call	0xd6	; 0xd6 <SPI_txrx>
	SPI_txrx(adress);//send address
 180:	8d 2f       	mov	r24, r29
 182:	0e 94 6b 00 	call	0xd6	; 0xd6 <SPI_txrx>
	SPI_txrx(data);//send value
 186:	8c 2f       	mov	r24, r28
 188:	0e 94 6b 00 	call	0xd6	; 0xd6 <SPI_txrx>

	SET_H(SS);//disable slave
 18c:	2a 9a       	sbi	0x05, 2	; 5
}
 18e:	df 91       	pop	r29
 190:	cf 91       	pop	r28
 192:	08 95       	ret

00000194 <mcp2515_read_register>:

uint8_t mcp2515_read_register(uint8_t adress)
{
 194:	cf 93       	push	r28
 196:	c8 2f       	mov	r28, r24
	uint8_t data;

	SET_L(SS);//enable slave
 198:	2a 98       	cbi	0x05, 2	; 5

	SPI_txrx(CAN_READ);
 19a:	83 e0       	ldi	r24, 0x03	; 3
 19c:	0e 94 6b 00 	call	0xd6	; 0xd6 <SPI_txrx>
	SPI_txrx(adress);
 1a0:	8c 2f       	mov	r24, r28
 1a2:	0e 94 6b 00 	call	0xd6	; 0xd6 <SPI_txrx>

	data = SPI_txrx(0xff);
 1a6:	8f ef       	ldi	r24, 0xFF	; 255
 1a8:	0e 94 6b 00 	call	0xd6	; 0xd6 <SPI_txrx>

	SET_H(SS);//disable slave
 1ac:	2a 9a       	sbi	0x05, 2	; 5

	return data;
}
 1ae:	cf 91       	pop	r28
 1b0:	08 95       	ret

000001b2 <mcp2515_bit_modify>:

// -------------------------------------------------------------------------
void mcp2515_bit_modify(uint8_t adress, uint8_t mask, uint8_t data)
{
 1b2:	1f 93       	push	r17
 1b4:	cf 93       	push	r28
 1b6:	df 93       	push	r29
 1b8:	18 2f       	mov	r17, r24
 1ba:	d6 2f       	mov	r29, r22
 1bc:	c4 2f       	mov	r28, r20
	SET_L(SS);
 1be:	2a 98       	cbi	0x05, 2	; 5

	SPI_txrx(CAN_BIT_MODIFY);
 1c0:	85 e0       	ldi	r24, 0x05	; 5
 1c2:	0e 94 6b 00 	call	0xd6	; 0xd6 <SPI_txrx>
	SPI_txrx(adress);
 1c6:	81 2f       	mov	r24, r17
 1c8:	0e 94 6b 00 	call	0xd6	; 0xd6 <SPI_txrx>
	SPI_txrx(mask);
 1cc:	8d 2f       	mov	r24, r29
 1ce:	0e 94 6b 00 	call	0xd6	; 0xd6 <SPI_txrx>
	SPI_txrx(data);
 1d2:	8c 2f       	mov	r24, r28
 1d4:	0e 94 6b 00 	call	0xd6	; 0xd6 <SPI_txrx>

	SET_H(SS);
 1d8:	2a 9a       	sbi	0x05, 2	; 5
}
 1da:	df 91       	pop	r29
 1dc:	cf 91       	pop	r28
 1de:	1f 91       	pop	r17
 1e0:	08 95       	ret

000001e2 <mcp2515_read_status>:
// ----------------------------------------------------------------------------
uint8_t mcp2515_read_status(uint8_t type)
{
	uint8_t data;

	SET_L(SS);
 1e2:	2a 98       	cbi	0x05, 2	; 5

	SPI_txrx(type);
 1e4:	0e 94 6b 00 	call	0xd6	; 0xd6 <SPI_txrx>
	data = SPI_txrx(0xff);
 1e8:	8f ef       	ldi	r24, 0xFF	; 255
 1ea:	0e 94 6b 00 	call	0xd6	; 0xd6 <SPI_txrx>

	SET_H(SS);
 1ee:	2a 9a       	sbi	0x05, 2	; 5

	return data;
}
 1f0:	08 95       	ret

000001f2 <mcp2515_init>:

uint8_t mcp2515_init(uint8_t speed)
{
 1f2:	cf 93       	push	r28
 1f4:	c8 2f       	mov	r28, r24

	// resets MCP2515 and puts it into configuration mode.
	SET_L(SS);
 1f6:	2a 98       	cbi	0x05, 2	; 5
	SPI_txrx(CAN_RESET);
 1f8:	80 ec       	ldi	r24, 0xC0	; 192
 1fa:	0e 94 6b 00 	call	0xd6	; 0xd6 <SPI_txrx>
	SET_H(SS);
 1fe:	2a 9a       	sbi	0x05, 2	; 5
 200:	8a e6       	ldi	r24, 0x6A	; 106
 202:	8a 95       	dec	r24
 204:	f1 f7       	brne	.-4      	; 0x202 <mcp2515_init+0x10>
 206:	00 c0       	rjmp	.+0      	; 0x208 <mcp2515_init+0x16>
	//I had to increase this from 10 to 20, as otherwise it would fail.
	//		The MCP2515 needed more time to reset.
	_delay_us(20);

	// load CNF1..3 Register
	SET_L(SS);
 208:	2a 98       	cbi	0x05, 2	; 5
	SPI_txrx(CAN_WRITE);
 20a:	82 e0       	ldi	r24, 0x02	; 2
 20c:	0e 94 6b 00 	call	0xd6	; 0xd6 <SPI_txrx>
	SPI_txrx(CNF3);  //address 0x28
 210:	88 e2       	ldi	r24, 0x28	; 40
 212:	0e 94 6b 00 	call	0xd6	; 0xd6 <SPI_txrx>

	SPI_txrx((1<<PHSEG21));		// Bitrate 500 kbps at 16 MHz
 216:	82 e0       	ldi	r24, 0x02	; 2
 218:	0e 94 6b 00 	call	0xd6	; 0xd6 <SPI_txrx>

	/*after tx the MCP2515 increments the address automatically, so you can
		continue to write into adjacent registers, so the next write goes into
		0x29, the location of CNF2*/
	SPI_txrx((1<<BTLMODE)|(1<<PHSEG11));//CFN2
 21c:	80 e9       	ldi	r24, 0x90	; 144
 21e:	0e 94 6b 00 	call	0xd6	; 0xd6 <SPI_txrx>
    SPI_txrx(speed);//writes to BRPn of CNF1
 222:	8c 2f       	mov	r24, r28
 224:	0e 94 6b 00 	call	0xd6	; 0xd6 <SPI_txrx>

	// activate interrupts
	SPI_txrx((1<<RX1IE)|(1<<RX0IE));
 228:	83 e0       	ldi	r24, 0x03	; 3
 22a:	0e 94 6b 00 	call	0xd6	; 0xd6 <SPI_txrx>
	SET_H(SS);
 22e:	2a 9a       	sbi	0x05, 2	; 5

	// test if we could read back the value => is the chip accessible?
	if (mcp2515_read_register(CNF1) != speed) {
 230:	8a e2       	ldi	r24, 0x2A	; 42
 232:	0e 94 ca 00 	call	0x194	; 0x194 <mcp2515_read_register>
 236:	8c 17       	cp	r24, r28
 238:	19 f0       	breq	.+6      	; 0x240 <mcp2515_init+0x4e>
		SET_H(LED2);
 23a:	28 9a       	sbi	0x05, 0	; 5

		return false;
 23c:	80 e0       	ldi	r24, 0x00	; 0
 23e:	a0 c0       	rjmp	.+320    	; 0x380 <mcp2515_init+0x18e>
	}

	// deactivate the RXnBF Pins (High Impedance State)
	mcp2515_write_register(BFPCTRL, 0);
 240:	60 e0       	ldi	r22, 0x00	; 0
 242:	8c e0       	ldi	r24, 0x0C	; 12
 244:	0e 94 b8 00 	call	0x170	; 0x170 <mcp2515_write_register>

	// set TXnRTS as inputs
	mcp2515_write_register(TXRTSCTRL, 0);
 248:	60 e0       	ldi	r22, 0x00	; 0
 24a:	8d e0       	ldi	r24, 0x0D	; 13
 24c:	0e 94 b8 00 	call	0x170	; 0x170 <mcp2515_write_register>
	CANBUS ID|
		Most of these have adjacent registers so we can address the register
		pairs in a single write session
******************************************************************************/
	//enable filtering
	mcp2515_write_register(RXB0CTRL, (1<<RXM0));//buffer0
 250:	60 e2       	ldi	r22, 0x20	; 32
 252:	80 e6       	ldi	r24, 0x60	; 96
 254:	0e 94 b8 00 	call	0x170	; 0x170 <mcp2515_write_register>
	mcp2515_write_register(RXB1CTRL, (1<<RXM0));//buffer1
 258:	60 e2       	ldi	r22, 0x20	; 32
 25a:	80 e7       	ldi	r24, 0x70	; 112
 25c:	0e 94 b8 00 	call	0x170	; 0x170 <mcp2515_write_register>

	//Receive Masking:
	//block all ID's other than the exact RxID for buffer0
	SET_L(SS);
 260:	2a 98       	cbi	0x05, 2	; 5
	SPI_txrx(CAN_WRITE);
 262:	82 e0       	ldi	r24, 0x02	; 2
 264:	0e 94 6b 00 	call	0xd6	; 0xd6 <SPI_txrx>
	SPI_txrx(RXM0SIDH);
 268:	80 e2       	ldi	r24, 0x20	; 32
 26a:	0e 94 6b 00 	call	0xd6	; 0xd6 <SPI_txrx>
	SPI_txrx(0xFF);
 26e:	8f ef       	ldi	r24, 0xFF	; 255
 270:	0e 94 6b 00 	call	0xd6	; 0xd6 <SPI_txrx>
	SPI_txrx(0xE0);
 274:	80 ee       	ldi	r24, 0xE0	; 224
 276:	0e 94 6b 00 	call	0xd6	; 0xd6 <SPI_txrx>
	SET_H(SS);
 27a:	2a 9a       	sbi	0x05, 2	; 5
// 	mcp2515_write_register(RXM0SIDH, 0xFF);
// 	mcp2515_write_register(RXM0SIDL, 0xE0);
	//block all ID's other than the exact RxID for buffer1
	SET_L(SS);
 27c:	2a 98       	cbi	0x05, 2	; 5
	SPI_txrx(CAN_WRITE);
 27e:	82 e0       	ldi	r24, 0x02	; 2
 280:	0e 94 6b 00 	call	0xd6	; 0xd6 <SPI_txrx>
	SPI_txrx(RXM1SIDH);
 284:	84 e2       	ldi	r24, 0x24	; 36
 286:	0e 94 6b 00 	call	0xd6	; 0xd6 <SPI_txrx>
	SPI_txrx(0xFF);
 28a:	8f ef       	ldi	r24, 0xFF	; 255
 28c:	0e 94 6b 00 	call	0xd6	; 0xd6 <SPI_txrx>
	SPI_txrx(0xE0);
 290:	80 ee       	ldi	r24, 0xE0	; 224
 292:	0e 94 6b 00 	call	0xd6	; 0xd6 <SPI_txrx>
	SET_H(SS);
 296:	2a 9a       	sbi	0x05, 2	; 5
// 	mcp2515_write_register(RXM1SIDH, 0xFF);
// 	mcp2515_write_register(RXM1SIDL, 0xE0);

	//Set RxID
	SET_L(SS);
 298:	2a 98       	cbi	0x05, 2	; 5
	SPI_txrx(CAN_WRITE);
 29a:	82 e0       	ldi	r24, 0x02	; 2
 29c:	0e 94 6b 00 	call	0xd6	; 0xd6 <SPI_txrx>
	SPI_txrx(RXF0SIDH);
 2a0:	80 e0       	ldi	r24, 0x00	; 0
 2a2:	0e 94 6b 00 	call	0xd6	; 0xd6 <SPI_txrx>
	SPI_txrx(RxIDHi);
 2a6:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <RxID>
 2aa:	86 95       	lsr	r24
 2ac:	86 95       	lsr	r24
 2ae:	86 95       	lsr	r24
 2b0:	0e 94 6b 00 	call	0xd6	; 0xd6 <SPI_txrx>
	SPI_txrx(RxIDLow);
 2b4:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <RxID>
 2b8:	82 95       	swap	r24
 2ba:	88 0f       	add	r24, r24
 2bc:	80 7e       	andi	r24, 0xE0	; 224
 2be:	0e 94 6b 00 	call	0xd6	; 0xd6 <SPI_txrx>
	SET_H(SS);
 2c2:	2a 9a       	sbi	0x05, 2	; 5
// 	mcp2515_write_register(RXF0SIDH, RxIDHi);//filter0
// 	mcp2515_write_register(RXF0SIDL, RxIDLow);

	SET_L(SS);
 2c4:	2a 98       	cbi	0x05, 2	; 5
	SPI_txrx(CAN_WRITE);
 2c6:	82 e0       	ldi	r24, 0x02	; 2
 2c8:	0e 94 6b 00 	call	0xd6	; 0xd6 <SPI_txrx>
	SPI_txrx(RXF1SIDH);
 2cc:	84 e0       	ldi	r24, 0x04	; 4
 2ce:	0e 94 6b 00 	call	0xd6	; 0xd6 <SPI_txrx>
	SPI_txrx(RxIDHi);
 2d2:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <RxID>
 2d6:	86 95       	lsr	r24
 2d8:	86 95       	lsr	r24
 2da:	86 95       	lsr	r24
 2dc:	0e 94 6b 00 	call	0xd6	; 0xd6 <SPI_txrx>
	SPI_txrx(RxIDLow);
 2e0:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <RxID>
 2e4:	82 95       	swap	r24
 2e6:	88 0f       	add	r24, r24
 2e8:	80 7e       	andi	r24, 0xE0	; 224
 2ea:	0e 94 6b 00 	call	0xd6	; 0xd6 <SPI_txrx>
	SET_H(SS);
 2ee:	2a 9a       	sbi	0x05, 2	; 5
// 	mcp2515_write_register(RXF1SIDH, RxIDHi);//filter1
// 	mcp2515_write_register(RXF1SIDL, RxIDLow);
	SET_L(SS);
 2f0:	2a 98       	cbi	0x05, 2	; 5
	SPI_txrx(CAN_WRITE);
 2f2:	82 e0       	ldi	r24, 0x02	; 2
 2f4:	0e 94 6b 00 	call	0xd6	; 0xd6 <SPI_txrx>
	SPI_txrx(RXF2SIDH);
 2f8:	88 e0       	ldi	r24, 0x08	; 8
 2fa:	0e 94 6b 00 	call	0xd6	; 0xd6 <SPI_txrx>
	SPI_txrx(RxIDHi);
 2fe:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <RxID>
 302:	86 95       	lsr	r24
 304:	86 95       	lsr	r24
 306:	86 95       	lsr	r24
 308:	0e 94 6b 00 	call	0xd6	; 0xd6 <SPI_txrx>
	SPI_txrx(RxIDLow);
 30c:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <RxID>
 310:	82 95       	swap	r24
 312:	88 0f       	add	r24, r24
 314:	80 7e       	andi	r24, 0xE0	; 224
 316:	0e 94 6b 00 	call	0xd6	; 0xd6 <SPI_txrx>
	SET_H(SS);
 31a:	2a 9a       	sbi	0x05, 2	; 5
// 	mcp2515_write_register(RXF2SIDH, RxIDHi);//filter2
// 	mcp2515_write_register(RXF2SIDL, RxIDLow);
	SET_L(SS);
 31c:	2a 98       	cbi	0x05, 2	; 5
	SPI_txrx(CAN_WRITE);
 31e:	82 e0       	ldi	r24, 0x02	; 2
 320:	0e 94 6b 00 	call	0xd6	; 0xd6 <SPI_txrx>
	SPI_txrx(RXF3SIDH);
 324:	80 e1       	ldi	r24, 0x10	; 16
 326:	0e 94 6b 00 	call	0xd6	; 0xd6 <SPI_txrx>
	SPI_txrx(RxIDHi);
 32a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <RxID>
 32e:	86 95       	lsr	r24
 330:	86 95       	lsr	r24
 332:	86 95       	lsr	r24
 334:	0e 94 6b 00 	call	0xd6	; 0xd6 <SPI_txrx>
	SPI_txrx(RxIDLow);
 338:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <RxID>
 33c:	82 95       	swap	r24
 33e:	88 0f       	add	r24, r24
 340:	80 7e       	andi	r24, 0xE0	; 224
 342:	0e 94 6b 00 	call	0xd6	; 0xd6 <SPI_txrx>
	SET_H(SS);
 346:	2a 9a       	sbi	0x05, 2	; 5
// 	mcp2515_write_register(RXF3SIDH, RxIDHi);//filter3
// 	mcp2515_write_register(RXF3SIDL, RxIDLow);
	SET_L(SS);
 348:	2a 98       	cbi	0x05, 2	; 5
	SPI_txrx(CAN_WRITE);
 34a:	82 e0       	ldi	r24, 0x02	; 2
 34c:	0e 94 6b 00 	call	0xd6	; 0xd6 <SPI_txrx>
	SPI_txrx(RXF4SIDH);
 350:	84 e1       	ldi	r24, 0x14	; 20
 352:	0e 94 6b 00 	call	0xd6	; 0xd6 <SPI_txrx>
	SPI_txrx(RxIDHi);
 356:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <RxID>
 35a:	86 95       	lsr	r24
 35c:	86 95       	lsr	r24
 35e:	86 95       	lsr	r24
 360:	0e 94 6b 00 	call	0xd6	; 0xd6 <SPI_txrx>
	SPI_txrx(RxIDLow);
 364:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <RxID>
 368:	82 95       	swap	r24
 36a:	88 0f       	add	r24, r24
 36c:	80 7e       	andi	r24, 0xE0	; 224
 36e:	0e 94 6b 00 	call	0xd6	; 0xd6 <SPI_txrx>
	SET_H(SS);
 372:	2a 9a       	sbi	0x05, 2	; 5
// 	mcp2515_write_register(RXF4SIDL, RxIDLow);

/******************************************************************************/

	// reset device to normal mode
	mcp2515_write_register(CANCTRL, 0);
 374:	60 e0       	ldi	r22, 0x00	; 0
 376:	8f e0       	ldi	r24, 0x0F	; 15
 378:	0e 94 b8 00 	call	0x170	; 0x170 <mcp2515_write_register>
	SET_L(LED2);
 37c:	28 98       	cbi	0x05, 0	; 5
	return true;
 37e:	81 e0       	ldi	r24, 0x01	; 1
}
 380:	cf 91       	pop	r28
 382:	08 95       	ret

00000384 <mcp2515_get_message>:

// ----------------------------------------------------------------------------
uint8_t mcp2515_get_message(tCAN *message)
{
 384:	cf 92       	push	r12
 386:	df 92       	push	r13
 388:	ef 92       	push	r14
 38a:	ff 92       	push	r15
 38c:	0f 93       	push	r16
 38e:	1f 93       	push	r17
 390:	cf 93       	push	r28
 392:	df 93       	push	r29
 394:	1f 92       	push	r1
 396:	cd b7       	in	r28, 0x3d	; 61
 398:	de b7       	in	r29, 0x3e	; 62
 39a:	6c 01       	movw	r12, r24
	// read status
	uint8_t status = mcp2515_read_status(CAN_RX_STATUS);
 39c:	80 eb       	ldi	r24, 0xB0	; 176
 39e:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <mcp2515_read_status>
 3a2:	89 83       	std	Y+1, r24	; 0x01
	uint8_t addr;
	uint8_t t;
	if (bit_is_set(status,6)) {
 3a4:	99 81       	ldd	r25, Y+1	; 0x01
 3a6:	89 2f       	mov	r24, r25
 3a8:	80 74       	andi	r24, 0x40	; 64
 3aa:	96 fd       	sbrc	r25, 6
 3ac:	06 c0       	rjmp	.+12     	; 0x3ba <mcp2515_get_message+0x36>
		// message in buffer 0
		addr = CAN_READ_RX_BUFF;
	}
	else if (bit_is_set(status,7)) {
 3ae:	99 81       	ldd	r25, Y+1	; 0x01
 3b0:	99 23       	and	r25, r25
 3b2:	0c f0       	brlt	.+2      	; 0x3b6 <mcp2515_get_message+0x32>
 3b4:	5e c0       	rjmp	.+188    	; 0x472 <__FUSE_REGION_LENGTH__+0x72>
		// message in buffer 1
		addr = CAN_READ_RX_BUFF | 0x04;
 3b6:	84 e9       	ldi	r24, 0x94	; 148
 3b8:	01 c0       	rjmp	.+2      	; 0x3bc <mcp2515_get_message+0x38>
	uint8_t status = mcp2515_read_status(CAN_RX_STATUS);
	uint8_t addr;
	uint8_t t;
	if (bit_is_set(status,6)) {
		// message in buffer 0
		addr = CAN_READ_RX_BUFF;
 3ba:	80 e9       	ldi	r24, 0x90	; 144
	else {
		// Error: no message available
		return 0;
	}

	SET_L(SS);
 3bc:	2a 98       	cbi	0x05, 2	; 5
	SPI_txrx(addr);
 3be:	0e 94 6b 00 	call	0xd6	; 0xd6 <SPI_txrx>

	// read id
	message->id  = (uint16_t) SPI_txrx(0xff) << 3;
 3c2:	8f ef       	ldi	r24, 0xFF	; 255
 3c4:	0e 94 6b 00 	call	0xd6	; 0xd6 <SPI_txrx>
 3c8:	28 e0       	ldi	r18, 0x08	; 8
 3ca:	82 9f       	mul	r24, r18
 3cc:	c0 01       	movw	r24, r0
 3ce:	11 24       	eor	r1, r1
 3d0:	f6 01       	movw	r30, r12
 3d2:	91 83       	std	Z+1, r25	; 0x01
 3d4:	80 83       	st	Z, r24
	message->id |=            SPI_txrx(0xff) >> 5;
 3d6:	8f ef       	ldi	r24, 0xFF	; 255
 3d8:	0e 94 6b 00 	call	0xd6	; 0xd6 <SPI_txrx>
 3dc:	28 2f       	mov	r18, r24
 3de:	22 95       	swap	r18
 3e0:	26 95       	lsr	r18
 3e2:	27 70       	andi	r18, 0x07	; 7
 3e4:	f6 01       	movw	r30, r12
 3e6:	80 81       	ld	r24, Z
 3e8:	91 81       	ldd	r25, Z+1	; 0x01
 3ea:	82 2b       	or	r24, r18
 3ec:	91 83       	std	Z+1, r25	; 0x01
 3ee:	80 83       	st	Z, r24

	SPI_txrx(0xff);
 3f0:	8f ef       	ldi	r24, 0xFF	; 255
 3f2:	0e 94 6b 00 	call	0xd6	; 0xd6 <SPI_txrx>
	SPI_txrx(0xff);
 3f6:	8f ef       	ldi	r24, 0xFF	; 255
 3f8:	0e 94 6b 00 	call	0xd6	; 0xd6 <SPI_txrx>

	// read DLC
	uint8_t length = SPI_txrx(0xff) & 0x0f;
 3fc:	8f ef       	ldi	r24, 0xFF	; 255
 3fe:	0e 94 6b 00 	call	0xd6	; 0xd6 <SPI_txrx>
 402:	98 2f       	mov	r25, r24
 404:	9f 70       	andi	r25, 0x0F	; 15

	message->header.length = length;
 406:	29 2f       	mov	r18, r25
 408:	22 0f       	add	r18, r18
 40a:	f6 01       	movw	r30, r12
 40c:	82 81       	ldd	r24, Z+2	; 0x02
 40e:	81 7e       	andi	r24, 0xE1	; 225
 410:	82 2b       	or	r24, r18
 412:	82 83       	std	Z+2, r24	; 0x02
	message->header.rtr = (bit_is_set(status, 3)) ? 1 : 0;
 414:	29 81       	ldd	r18, Y+1	; 0x01
 416:	23 fb       	bst	r18, 3
 418:	22 27       	eor	r18, r18
 41a:	20 f9       	bld	r18, 0
 41c:	20 fb       	bst	r18, 0
 41e:	80 f9       	bld	r24, 0
 420:	82 83       	std	Z+2, r24	; 0x02

	// read data
	for (t=0;t<length;t++) {
 422:	99 23       	and	r25, r25
 424:	a1 f0       	breq	.+40     	; 0x44e <__FUSE_REGION_LENGTH__+0x4e>
 426:	86 01       	movw	r16, r12
 428:	0d 5f       	subi	r16, 0xFD	; 253
 42a:	1f 4f       	sbci	r17, 0xFF	; 255
 42c:	91 50       	subi	r25, 0x01	; 1
 42e:	e9 2e       	mov	r14, r25
 430:	f1 2c       	mov	r15, r1
 432:	f4 e0       	ldi	r31, 0x04	; 4
 434:	ef 0e       	add	r14, r31
 436:	f1 1c       	adc	r15, r1
 438:	ec 0c       	add	r14, r12
 43a:	fd 1c       	adc	r15, r13
		message->data[t] = SPI_txrx(0xff);
 43c:	8f ef       	ldi	r24, 0xFF	; 255
 43e:	0e 94 6b 00 	call	0xd6	; 0xd6 <SPI_txrx>
 442:	f8 01       	movw	r30, r16
 444:	81 93       	st	Z+, r24
 446:	8f 01       	movw	r16, r30

	message->header.length = length;
	message->header.rtr = (bit_is_set(status, 3)) ? 1 : 0;

	// read data
	for (t=0;t<length;t++) {
 448:	ee 15       	cp	r30, r14
 44a:	ff 05       	cpc	r31, r15
 44c:	b9 f7       	brne	.-18     	; 0x43c <__FUSE_REGION_LENGTH__+0x3c>
		message->data[t] = SPI_txrx(0xff);
	}
	SET_H(SS);
 44e:	2a 9a       	sbi	0x05, 2	; 5

	// clear interrupt flag
	if (bit_is_set(status, 6)) {
 450:	89 81       	ldd	r24, Y+1	; 0x01
 452:	86 ff       	sbrs	r24, 6
 454:	06 c0       	rjmp	.+12     	; 0x462 <__FUSE_REGION_LENGTH__+0x62>
		mcp2515_bit_modify(CANINTF, (1<<RX0IF), 0);
 456:	40 e0       	ldi	r20, 0x00	; 0
 458:	61 e0       	ldi	r22, 0x01	; 1
 45a:	8c e2       	ldi	r24, 0x2C	; 44
 45c:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <mcp2515_bit_modify>
 460:	05 c0       	rjmp	.+10     	; 0x46c <__FUSE_REGION_LENGTH__+0x6c>
	}
	else {
		mcp2515_bit_modify(CANINTF, (1<<RX1IF), 0);
 462:	40 e0       	ldi	r20, 0x00	; 0
 464:	62 e0       	ldi	r22, 0x02	; 2
 466:	8c e2       	ldi	r24, 0x2C	; 44
 468:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <mcp2515_bit_modify>
	}

	return (status & 0x07) + 1;
 46c:	89 81       	ldd	r24, Y+1	; 0x01
 46e:	87 70       	andi	r24, 0x07	; 7
 470:	8f 5f       	subi	r24, 0xFF	; 255
}
 472:	0f 90       	pop	r0
 474:	df 91       	pop	r29
 476:	cf 91       	pop	r28
 478:	1f 91       	pop	r17
 47a:	0f 91       	pop	r16
 47c:	ff 90       	pop	r15
 47e:	ef 90       	pop	r14
 480:	df 90       	pop	r13
 482:	cf 90       	pop	r12
 484:	08 95       	ret

00000486 <mcp2515_send_message>:

// ----------------------------------------------------------------------------
uint8_t mcp2515_send_message(tCAN *message)
{
 486:	bf 92       	push	r11
 488:	cf 92       	push	r12
 48a:	df 92       	push	r13
 48c:	ef 92       	push	r14
 48e:	ff 92       	push	r15
 490:	0f 93       	push	r16
 492:	1f 93       	push	r17
 494:	cf 93       	push	r28
 496:	df 93       	push	r29
 498:	1f 92       	push	r1
 49a:	cd b7       	in	r28, 0x3d	; 61
 49c:	de b7       	in	r29, 0x3e	; 62
 49e:	6c 01       	movw	r12, r24
	uint8_t status = mcp2515_read_status(CAN_READ_STATUS);
 4a0:	80 ea       	ldi	r24, 0xA0	; 160
 4a2:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <mcp2515_read_status>
 4a6:	89 83       	std	Y+1, r24	; 0x01
	 *  6	TXB2CNTRL.TXREQ
	 */
	uint8_t address;
	uint8_t t;
//	SET(LED2_HIGH);
	if (bit_is_clear(status, 2)) {
 4a8:	89 81       	ldd	r24, Y+1	; 0x01
 4aa:	82 ff       	sbrs	r24, 2
 4ac:	0a c0       	rjmp	.+20     	; 0x4c2 <mcp2515_send_message+0x3c>
		address = 0x00;
	}
	else if (bit_is_clear(status, 4)) {
 4ae:	89 81       	ldd	r24, Y+1	; 0x01
 4b0:	84 ff       	sbrs	r24, 4
 4b2:	09 c0       	rjmp	.+18     	; 0x4c6 <mcp2515_send_message+0x40>
		address = 0x02;
	}
	else if (bit_is_clear(status, 6)) {
 4b4:	89 81       	ldd	r24, Y+1	; 0x01
 4b6:	86 fd       	sbrc	r24, 6
 4b8:	5d c0       	rjmp	.+186    	; 0x574 <mcp2515_send_message+0xee>
		address = 0x04;
 4ba:	68 94       	set
 4bc:	bb 24       	eor	r11, r11
 4be:	b2 f8       	bld	r11, 2
 4c0:	05 c0       	rjmp	.+10     	; 0x4cc <mcp2515_send_message+0x46>
	 */
	uint8_t address;
	uint8_t t;
//	SET(LED2_HIGH);
	if (bit_is_clear(status, 2)) {
		address = 0x00;
 4c2:	b1 2c       	mov	r11, r1
 4c4:	03 c0       	rjmp	.+6      	; 0x4cc <mcp2515_send_message+0x46>
	}
	else if (bit_is_clear(status, 4)) {
		address = 0x02;
 4c6:	68 94       	set
 4c8:	bb 24       	eor	r11, r11
 4ca:	b1 f8       	bld	r11, 1
	else {
		// all buffer used => could not send message
		return 0;
	}

	SET_L(SS);
 4cc:	2a 98       	cbi	0x05, 2	; 5
	SPI_txrx(CAN_LOAD_TX_BUFF | address);
 4ce:	8b 2d       	mov	r24, r11
 4d0:	80 64       	ori	r24, 0x40	; 64
 4d2:	0e 94 6b 00 	call	0xd6	; 0xd6 <SPI_txrx>

	SPI_txrx(message->id >> 3);
 4d6:	f6 01       	movw	r30, r12
 4d8:	80 81       	ld	r24, Z
 4da:	91 81       	ldd	r25, Z+1	; 0x01
 4dc:	96 95       	lsr	r25
 4de:	87 95       	ror	r24
 4e0:	96 95       	lsr	r25
 4e2:	87 95       	ror	r24
 4e4:	96 95       	lsr	r25
 4e6:	87 95       	ror	r24
 4e8:	0e 94 6b 00 	call	0xd6	; 0xd6 <SPI_txrx>
    SPI_txrx(message->id << 5);
 4ec:	f6 01       	movw	r30, r12
 4ee:	80 81       	ld	r24, Z
 4f0:	82 95       	swap	r24
 4f2:	88 0f       	add	r24, r24
 4f4:	80 7e       	andi	r24, 0xE0	; 224
 4f6:	0e 94 6b 00 	call	0xd6	; 0xd6 <SPI_txrx>

	SPI_txrx(0);
 4fa:	80 e0       	ldi	r24, 0x00	; 0
 4fc:	0e 94 6b 00 	call	0xd6	; 0xd6 <SPI_txrx>
	SPI_txrx(0);
 500:	80 e0       	ldi	r24, 0x00	; 0
 502:	0e 94 6b 00 	call	0xd6	; 0xd6 <SPI_txrx>

	uint8_t length = message->header.length & 0x0f;
 506:	f6 01       	movw	r30, r12
 508:	82 81       	ldd	r24, Z+2	; 0x02
 50a:	f8 2e       	mov	r15, r24
 50c:	f6 94       	lsr	r15
 50e:	ff 2d       	mov	r31, r15
 510:	ff 70       	andi	r31, 0x0F	; 15
 512:	ff 2e       	mov	r15, r31

	if (message->header.rtr) {
 514:	80 ff       	sbrs	r24, 0
 516:	05 c0       	rjmp	.+10     	; 0x522 <mcp2515_send_message+0x9c>
		// a rtr-frame has a length, but contains no data
		SPI_txrx((1<<RTR) | length);
 518:	8f 2f       	mov	r24, r31
 51a:	80 64       	ori	r24, 0x40	; 64
 51c:	0e 94 6b 00 	call	0xd6	; 0xd6 <SPI_txrx>
 520:	18 c0       	rjmp	.+48     	; 0x552 <mcp2515_send_message+0xcc>
	}
	else {
		// set message length
		SPI_txrx(length);
 522:	8f 2f       	mov	r24, r31
 524:	0e 94 6b 00 	call	0xd6	; 0xd6 <SPI_txrx>

		// data
		for (t=0;t<length;t++) {
 528:	ff 20       	and	r15, r15
 52a:	99 f0       	breq	.+38     	; 0x552 <mcp2515_send_message+0xcc>
 52c:	86 01       	movw	r16, r12
 52e:	0d 5f       	subi	r16, 0xFD	; 253
 530:	1f 4f       	sbci	r17, 0xFF	; 255
 532:	fa 94       	dec	r15
 534:	ef 2c       	mov	r14, r15
 536:	f1 2c       	mov	r15, r1
 538:	84 e0       	ldi	r24, 0x04	; 4
 53a:	e8 0e       	add	r14, r24
 53c:	f1 1c       	adc	r15, r1
 53e:	ec 0c       	add	r14, r12
 540:	fd 1c       	adc	r15, r13
			SPI_txrx(message->data[t]);
 542:	f8 01       	movw	r30, r16
 544:	81 91       	ld	r24, Z+
 546:	8f 01       	movw	r16, r30
 548:	0e 94 6b 00 	call	0xd6	; 0xd6 <SPI_txrx>
	else {
		// set message length
		SPI_txrx(length);

		// data
		for (t=0;t<length;t++) {
 54c:	0e 15       	cp	r16, r14
 54e:	1f 05       	cpc	r17, r15
 550:	c1 f7       	brne	.-16     	; 0x542 <mcp2515_send_message+0xbc>
			SPI_txrx(message->data[t]);
		}
	}
	SET_H(SS);
 552:	2a 9a       	sbi	0x05, 2	; 5
 554:	f5 e0       	ldi	r31, 0x05	; 5
 556:	fa 95       	dec	r31
 558:	f1 f7       	brne	.-4      	; 0x556 <mcp2515_send_message+0xd0>
 55a:	00 00       	nop

	_delay_us(1);

	// send message
	SET_L(SS);
 55c:	2a 98       	cbi	0x05, 2	; 5
	address = (address == 0) ? 1 : address;
 55e:	b1 10       	cpse	r11, r1
 560:	02 c0       	rjmp	.+4      	; 0x566 <mcp2515_send_message+0xe0>
 562:	bb 24       	eor	r11, r11
 564:	b3 94       	inc	r11
	SPI_txrx(CAN_RTS | address);
 566:	8b 2d       	mov	r24, r11
 568:	80 68       	ori	r24, 0x80	; 128
 56a:	0e 94 6b 00 	call	0xd6	; 0xd6 <SPI_txrx>
	SET_H(SS);
 56e:	2a 9a       	sbi	0x05, 2	; 5

	return address;
 570:	8b 2d       	mov	r24, r11
 572:	01 c0       	rjmp	.+2      	; 0x576 <mcp2515_send_message+0xf0>
	else if (bit_is_clear(status, 6)) {
		address = 0x04;
	}
	else {
		// all buffer used => could not send message
		return 0;
 574:	80 e0       	ldi	r24, 0x00	; 0
	address = (address == 0) ? 1 : address;
	SPI_txrx(CAN_RTS | address);
	SET_H(SS);

	return address;
 576:	0f 90       	pop	r0
 578:	df 91       	pop	r29
 57a:	cf 91       	pop	r28
 57c:	1f 91       	pop	r17
 57e:	0f 91       	pop	r16
 580:	ff 90       	pop	r15
 582:	ef 90       	pop	r14
 584:	df 90       	pop	r13
 586:	cf 90       	pop	r12
 588:	bf 90       	pop	r11
 58a:	08 95       	ret

0000058c <main>:
	start of main()|
******************************************************************************/
int main(void)
{
	
	usart_char.id = TxID;
 58c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <TxID>
 590:	90 e0       	ldi	r25, 0x00	; 0
 592:	90 93 32 01 	sts	0x0132, r25	; 0x800132 <usart_char+0x1>
 596:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <usart_char>
	usart_char.header.rtr = 0;
 59a:	e3 e3       	ldi	r30, 0x33	; 51
 59c:	f1 e0       	ldi	r31, 0x01	; 1
 59e:	80 81       	ld	r24, Z
	usart_char.header.length = 1;
 5a0:	80 7e       	andi	r24, 0xE0	; 224
 5a2:	82 60       	ori	r24, 0x02	; 2
 5a4:	80 83       	st	Z, r24
	
	
	
	
	//initialization functions
	GPIO_init();
 5a6:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_init>
	INTERRUPT_init();
 5aa:	0e 94 56 00 	call	0xac	; 0xac <INTERRUPT_init>
	USART_Init(103);//103 sets baud rate at 9600
 5ae:	87 e6       	ldi	r24, 0x67	; 103
 5b0:	90 e0       	ldi	r25, 0x00	; 0
 5b2:	0e 94 77 00 	call	0xee	; 0xee <USART_Init>
	SPI_masterInit();
 5b6:	0e 94 5e 00 	call	0xbc	; 0xbc <SPI_masterInit>
	
	if(mcp2515_init(CANSPEED_500))//MCP2515 initialization
 5ba:	81 e0       	ldi	r24, 0x01	; 1
 5bc:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <mcp2515_init>
 5c0:	88 23       	and	r24, r24
 5c2:	29 f0       	breq	.+10     	; 0x5ce <main+0x42>
	{
		USART_Transmit_TX("Can Init SUCCESS!");
 5c4:	82 e0       	ldi	r24, 0x02	; 2
 5c6:	91 e0       	ldi	r25, 0x01	; 1
 5c8:	0e 94 96 00 	call	0x12c	; 0x12c <USART_Transmit_TX>
 5cc:	04 c0       	rjmp	.+8      	; 0x5d6 <main+0x4a>
	}else
	{
		USART_Transmit_TX("Can Init FAILURE!");
 5ce:	84 e1       	ldi	r24, 0x14	; 20
 5d0:	91 e0       	ldi	r25, 0x01	; 1
 5d2:	0e 94 96 00 	call	0x12c	; 0x12c <USART_Transmit_TX>
	}
	USART_Transmit(13);//Carriage return
 5d6:	8d e0       	ldi	r24, 0x0D	; 13
 5d8:	0e 94 8e 00 	call	0x11c	; 0x11c <USART_Transmit>
	
	while (1)/***************************************************/
	{
		if(!(UCSR0A & (1<<RXC0)))//if data in serial buffer
 5dc:	c0 ec       	ldi	r28, 0xC0	; 192
 5de:	d0 e0       	ldi	r29, 0x00	; 0
		{
			usart_char.data[0] = USART_Receive();//get serial data
 5e0:	01 e3       	ldi	r16, 0x31	; 49
 5e2:	11 e0       	ldi	r17, 0x01	; 1
	}
	USART_Transmit(13);//Carriage return
	
	while (1)/***************************************************/
	{
		if(!(UCSR0A & (1<<RXC0)))//if data in serial buffer
 5e4:	98 81       	ld	r25, Y
 5e6:	99 23       	and	r25, r25
 5e8:	ec f3       	brlt	.-6      	; 0x5e4 <main+0x58>
		{
			usart_char.data[0] = USART_Receive();//get serial data
 5ea:	0e 94 86 00 	call	0x10c	; 0x10c <USART_Receive>
 5ee:	f8 01       	movw	r30, r16
 5f0:	83 83       	std	Z+3, r24	; 0x03
			
			//transmit usart_char over canbus
			mcp2515_send_message(&usart_char);
 5f2:	c8 01       	movw	r24, r16
 5f4:	0e 94 43 02 	call	0x486	; 0x486 <mcp2515_send_message>
 5f8:	f5 cf       	rjmp	.-22     	; 0x5e4 <main+0x58>

000005fa <__vector_1>:
}/*****end of main()**********************************************************/


//RECEIVE interrupt on pin PD2
ISR(INT0_vect)
{
 5fa:	1f 92       	push	r1
 5fc:	0f 92       	push	r0
 5fe:	0f b6       	in	r0, 0x3f	; 63
 600:	0f 92       	push	r0
 602:	11 24       	eor	r1, r1
 604:	2f 93       	push	r18
 606:	3f 93       	push	r19
 608:	4f 93       	push	r20
 60a:	5f 93       	push	r21
 60c:	6f 93       	push	r22
 60e:	7f 93       	push	r23
 610:	8f 93       	push	r24
 612:	9f 93       	push	r25
 614:	af 93       	push	r26
 616:	bf 93       	push	r27
 618:	ef 93       	push	r30
 61a:	ff 93       	push	r31
	mcp2515_get_message(&spi_char);
 61c:	86 e2       	ldi	r24, 0x26	; 38
 61e:	91 e0       	ldi	r25, 0x01	; 1
 620:	0e 94 c2 01 	call	0x384	; 0x384 <mcp2515_get_message>
	USART_Transmit(spi_char.data[0]);
 624:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <__data_end+0x3>
 628:	0e 94 8e 00 	call	0x11c	; 0x11c <USART_Transmit>
 62c:	ff 91       	pop	r31
 62e:	ef 91       	pop	r30
 630:	bf 91       	pop	r27
 632:	af 91       	pop	r26
 634:	9f 91       	pop	r25
 636:	8f 91       	pop	r24
 638:	7f 91       	pop	r23
 63a:	6f 91       	pop	r22
 63c:	5f 91       	pop	r21
 63e:	4f 91       	pop	r20
 640:	3f 91       	pop	r19
 642:	2f 91       	pop	r18
 644:	0f 90       	pop	r0
 646:	0f be       	out	0x3f, r0	; 63
 648:	0f 90       	pop	r0
 64a:	1f 90       	pop	r1
 64c:	18 95       	reti

0000064e <_exit>:
 64e:	f8 94       	cli

00000650 <__stop_program>:
 650:	ff cf       	rjmp	.-2      	; 0x650 <__stop_program>
